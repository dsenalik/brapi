<?php

/**
 * @file
 * Installation of Breeding API module.
 */

/**
 * Implements hook_enable().
 */
function brapi_enable() {
  // Make sure the BrAPI CV is still there.
  $brapi_cv_select = array('name' => BRAPI_CV);
  $brapi_cv = chado_select_record('cv', array('cv_id'), $brapi_cv_select);
  if (is_array($brapi_cv)) {
    $brapi_cv = current($brapi_cv);
  }
  if (!$brapi_cv) {
    brapi_add_cvs();
  }
}

/**
 * Implements hook_requirements().
 */
function brapi_requirements($phase) {
  $t = get_t();
  $requirements = array();
  // Check Tripal 2 or 3 requirements.
  $meets_tripal_requirements = FALSE;
  if (module_exists('tripal_core')) {
    // Tripal 2.
    if (!module_exists('tripal_views')) {
      $requirements['brapi'] = array(
        'title' => 'Breeding API',
        'value' => $t('ERROR: Tripal Views must be enabled!'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else if (!module_exists('tripal_db')) {
      $requirements['brapi'] = array(
        'title' => 'Breeding API',
        'value' => $t('ERROR: Tripal DB must be enabled!'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else if (!module_exists('tripal_cv')) {
      $requirements['brapi'] = array(
        'title' => 'Breeding API',
        'value' => $t('ERROR: Tripal CV must be enabled!'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $meets_tripal_requirements = TRUE;
    }
  }
  else if (module_exists('tripal')) {
    // Tripal 3.
    if (!module_exists('tripal_chado')) {
      $requirements['brapi'] = array(
        'title' => 'Breeding API',
        'value' => $t('ERROR: Tripal Chado must be enabled!'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else if (!module_exists('tripal_chado_views')) {
      $requirements['brapi'] = array(
        'title' => 'Breeding API',
        'value' => $t('ERROR: Tripal Chado Views must be enabled!'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $meets_tripal_requirements = TRUE;
    }
  }

  if (($phase == 'install') && $meets_tripal_requirements) {
    // Make sure chado is installed.
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements['brapi'] = array(
        'title' => 'Breeding API',
        'value' => $t('ERROR: Chado must be installed before this module can be enabled'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function brapi_install() {
  $t = get_t();

  // Add controlled vocabularies and terms.
  brapi_add_cvs();

  // Set BrAPI term settings.
  variable_del(BRAPI_CV_SETTINGS);
  $initial_brapi_cv_settings = brapi_get_cv_settings(TRUE);
  variable_set(BRAPI_CV_SETTINGS, $initial_brapi_cv_settings);

  drupal_set_message(
    $t('Breeding API settings are available under !link',
      array(
        '!link' => l(
          implode(
            ' > ',
            array(
              $t('Administration'),
              $t('Tripal'),
              $t('Extensions'),
              $t('Breeding API'),
              $t('Settings'),
            )
          ),
          '/admin/tripal/extension/brapi/configuration'
        ),
      )
    )
  );
}

/**
 * Implements hook_schema().
 */
function brapi_schema() {
  $schema = array();

  $schema['brapi_id_list'] = array(
    'description' => 'The base table for BrAPI ID lists.',
    'fields' => array(
      'blid' => array(
        'description' => 'Primary Key: BrAPI ID list identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'My ID List',
        'description' => 'BrAPI ID list name (Human readable label).',
        'translatable' => TRUE,
      ),
      'description' => array(
        'description' => 'A brief description of this BrAPI ID list.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'version' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'BrAPI site version.',
      ),
      'list_owner' => array(
        'description' => 'Name of the list owner',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
    ) + entity_exportable_schema_fields(),
    'unique keys' => array(
      'brapi_id_list_blid_uq1' => array('blid'),
    ),
    'primary key' => array('blid'),
    'indexes' => array(
      'blid' => array('blid'),
    ),
  );

  return $schema;
}

/**
 * Update aggregation option variable to remove the first '/' of calls.
 */
function brapi_update_7100(&$sandbox) {
  $old_aggregation_options = variable_get(BRAPI_AGGREGATION_OPTIONS, array());
  $new_aggregation_options = array();
  foreach ($old_aggregation_options as $call_path => $aggregation_option) {
    // Remove leading slash.
    $call_path = preg_replace('/^\//', '', $call_path);
    $new_aggregation_options[$call_path] = $aggregation_option;
  }
  variable_set(BRAPI_AGGREGATION_OPTIONS, $new_aggregation_options);
}

/**
 * Update BrAPI CV.
 */
function brapi_update_7101(&$sandbox) {
  brapi_cleanup_cvterms(TRUE);
  brapi_add_cvterms();
}

/**
 * Update BrAPI CV-MCPD settings.
 */
function brapi_update_7102(&$sandbox) {
  brapi_cleanup_cvterms(TRUE);
  brapi_add_cvterms();
  $current_brapi_cv_settings = variable_get(BRAPI_CV_SETTINGS, array());
  brapi_update_cv_settings();
  $new_brapi_cv_settings = variable_get(BRAPI_CV_SETTINGS, array());
  if (isset($current_brapi_cv_settings['donor'])) {
    $new_brapi_cv_settings['donor institute'] = $current_brapi_cv_settings['donor'];
  }
  variable_set(BRAPI_CV_SETTINGS, $new_brapi_cv_settings);
}

/**
 * Implements hook_uninstall().
 */
function brapi_uninstall() {
  $t = get_t();
  // Remove BrAPI CVs.
  brapi_remove_cvs();
  // Notify MCPD CV has not been removed.
  drupal_set_message($t("BrAPI: MCPD vocabulary has not been removed from Chado. If you don't need it anymore, you can remove it manually using the following SQL query: \"DELETE FROM chado.cv cv WHERE cv.name = '" . BRAPI_MULTICROP_PASSPORT_ONTOLOGY_CV . "';\""));
  // Clear BrAPI settings.
  variable_del(BRAPI_AGGREGATION_OPTIONS);
  variable_del(BRAPI_CUSTOM_DATE_FORMAT);
  variable_del(BRAPI_CV_SETTINGS);
  variable_del(BRAPI_DATE_FORMAT);
  variable_del(BRAPI_EXAMPLE_SETTINGS);
  variable_del(BRAPI_GERMPLASM_ATTR_CATEGORIES);
  variable_del(BRAPI_GERMPLASM_ATTRIBUTES);
  variable_del(BRAPI_STORAGE_OPTIONS);
}

/**
 * Adds MCPD and Breeeding API controlled vocabulary if missing.
 */
function brapi_load_obo($name, $file) {
  $return = FALSE;
  if (module_exists('tripal_chado')) {
    module_load_include('inc', 'tripal_chado', 'includes/tripal_chado.cv');
    // Tripal v3.
    if ($obo_id = chado_insert_obo($name, $file)) {
      tripal_cv_load_obo($obo_id);
    }
    $return = $obo_id;
  }
  elseif (module_exists('tripal_cv') && function_exists('tripal_cv_load_obo_v1_2')) {
    // Tripal v2.
    $newcvs = array();
    $return = tripal_cv_load_obo_v1_2($file, NULL, $newcvs);
  }
  else {
    throw new Exception(t(
      "Unable to find a way to load MCPD OBO file!"
    ));
  }

  return $return;
}

/**
 * Adds MCPD and Breeeding API controlled vocabulary if missing.
 */
function brapi_add_cvs() {
  $t = get_t();
  // Install MCPD CV if not available.
  // First, check MCPD CV is installed.
  $mcpd_select = array('name' => 'multicrop passport ontology');
  $mcpd_cv = chado_select_record('cv', array('cv_id'), $mcpd_select);
  if (is_array($mcpd_cv)) {
    $mcpd_cv = current($mcpd_cv);
  }
  if (!$mcpd_cv) {
    
    $mcpd_path = drupal_get_path('module', 'brapi') . '/cv/mcpd_v2.1_151215.obo';
    brapi_load_obo('Multi-Crop Passport Descriptors Ontology', $mcpd_path);
  }

  // Install relationship CV if not available.
  // First, check relationship CV is installed.
  $rel_select = array('name' => 'relationship');
  $relationship_cv = chado_select_record('cv', array('cv_id'), $rel_select);
  if (is_array($relationship_cv)) {
    $relationship_cv = current($relationship_cv);
  }
  if (!$relationship_cv) {
    $newcvs = array();
    $relationship_path = drupal_get_path('module', 'tripal_cv') . '/files/legacy_ro.obo';
    brapi_load_obo('Relationship', $relationship_path);
  }

  // Insert Breeding API CV if missing.
  drupal_set_message($t('Adding Breeding API CV to Chado'));
  tripal_insert_cv(
    BRAPI_CV,
    'Contains Breeding API controlled vocabulary.'
  );
  brapi_add_cvterms();
}

/**
 * Adds controlled vocabulary terms needed by this module.
 */
function brapi_add_cvterms() {
  $brapi_cv = brapi_get_cv();
  foreach ($brapi_cv as $cvterm_name => $definition) {
    tripal_insert_cvterm(array(
      'id'         => BRAPI_DB . ':' . $cvterm_name,
      'name'       => $cvterm_name,
      'cv_name'    => BRAPI_CV,
      'definition' => $definition,
      'db_name'    => BRAPI_DB,
    ));
  }
}

/**
 * Cleanup unused BrAPI CV terms.
 */
function brapi_cleanup_cvterms($remove = FALSE) {
  $brapi_cv = brapi_get_cv();

  // Get all BrAPI CV terms.
  $cvterms = chado_generate_var(
    'cvterm',
    array('cv_id' => array('name' => BRAPI_CV))
  );

  $cvterm_to_remove = array();
  foreach ($cvterms as $cvterm) {
    if (!array_key_exists($cvterm->name, $brapi_cv)) {
      if ($remove) {
        chado_delete_record(
          'cvterm',
          array('cvterm_id' => $cvterm->cvterm_id)
        );
      }
      else {
        $cvterm_to_remove[] = $cvterm->cvterm_id;
      }
    }
  }

  if ($cvterm_to_remove) {
    $t = get_t();
    drupal_set_message(
      $t(
        'Obsolete BrAPI CV terms were not removed. To remove them manually, use the following SQL command: "DELETE FROM chado.cvterm WHERE cvterm_id IN (%cvterm_ids);"',
        array('%cvterm_ids' => implode(',', $cvterm_to_remove))
      ),
      'warning'
    );
  }
}

/**
 * Remove BrAPI CV from Chado.
 */
function brapi_remove_cvs() {
  // Remove Breeding API CV.
  $cv_match = array('name' => BRAPI_CV);
  chado_delete_record('cv', $cv_match);
}

/**
 * Updates CV and MCPD settings according to new terms.
 */
function brapi_update_cv_settings() {
  // Clear any existing cache of CV setting.
  cache_set(BRAPI_CV_SETTINGS, FALSE);
  // Get current settings.
  $current_brapi_cv_settings = variable_get(BRAPI_CV_SETTINGS, array());
  // Prepare new settings.
  $new_brapi_cv_settings = array();

  // Keep current settings, remove old ones and add new ones.
  foreach (brapi_get_cv() as $brapi_term => $term_definition) {
    // If term already saved in current settings keep it.
    if (isset($current_brapi_cv_settings[$brapi_term])) {
      $new_brapi_cv_settings[$brapi_term] =
        $current_brapi_cv_settings[$brapi_term];
    }
    else {
      // Otherwise get term from BrAPI CV.
      $cvterm_id = brapi_get_cvterm_id($brapi_term, BRAPI_CV);
      if ($cvterm_id) {
        // Term found.
        $new_brapi_cv_settings[$brapi_term] = $cvterm_id;
      }
      else {
        // Not found, clear.
        $new_brapi_cv_settings[$brapi_term] = 0;
        $t = get_t();
        drupal_set_message(
          $t(
            'BrAPI term "@term_name" not found in BrAPI controlled vocabulary! You may need to re-install BrAPI module.',
            array('@term_name' => $brapi_term)
          ),
          'warning'
        );
      }
    }
  }

  // Do the same with new MCPD settings.
  $mcpd_cv_settings = brapi_get_mcpd_settings(TRUE);
  foreach ($mcpd_cv_settings as $brapi_term => $term_ids) {
    // If term already saved in current settings keep it.
    if (isset($current_brapi_cv_settings[$brapi_term])) {
      $new_brapi_cv_settings[$brapi_term] =
        $current_brapi_cv_settings[$brapi_term];
    }
    else {
      // Otherwise use the default MCPD one.
      $new_brapi_cv_settings[$brapi_term] = $term_ids;
    }
  }

  // Save updated settings.
  variable_set(BRAPI_CV_SETTINGS, $new_brapi_cv_settings);
}
