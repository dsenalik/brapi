<?php

/**
 * @file
 * This file contains all Drupal hooks for the Breeding API module.
 */

/**
 * @defgroup brapi Breedind API
 * @{
 * Breeding API implementation.
 *
 * These functions are part of the Drupal Breeding API implementation internal
 * uses.
 * @}
 */

// Includes constants.
require 'api/brapi.const.inc';
// Includes API functions.
require 'api/brapi.api.inc';
// Includes theming functions.
require 'theme/brapi.theme.inc';
// Includes administrative functions.
require 'includes/brapi.admin.inc';
// Includes call implementations.
require 'api/brapi.calls.inc';

/**
 * Implements hook_boot().
 *
 * BrAPI-compliant clients are not supposed to support cookies but rather
 * support "bearer" token instead. Drupal does not work with bearer token and
 * uses session cookies.
 * This hook implementation is used to convert the "bearer" token provided by
 * BrAPI-compliant clients into a Drupal session cookie.
 * The initial bearer token is provided by this BrAPI implementation when the
 * client uses the login service (POST /brapi/v1/token). The bearer token is
 * generated using Drupal login system that creates a session object. The
 * session cookie is serialized in a string ("name=id") and provided as token
 * to the client application that will use it for the next calls that
 * requires authentication.
 *
 * BrAPI-compliant clients provide this kind of bearer token in the HTTP header:
 * Authorization: Bearer SESS13cd44e3aa3714d0cc373e81c4e33f5b=JoAO7C2aGrSkteEtoy
 *
 * The bearer value is break into 2 pieces that correspond to the session name
 * and the session ID.
 *
 * @ingroup brapi
 */
function brapi_boot() {
  // Only allow authentication through HTTPS chanel.
  // Get session id from bearer token (HTTP header provided by the client).
  if (isset($_SERVER['HTTPS'])
      && $_SERVER['HTTPS']
      && isset($_SERVER['HTTP_AUTHORIZATION'])) {
    $got_authentication = preg_match(
                            "/\s*Bearer\s+([^\s=]+)=(\S+)/i",
                            $_SERVER['HTTP_AUTHORIZATION'],
                            $matches
                          );
    if ($got_authentication) {
      // Save current session data.
      $session_data = isset($_SESSION) ? $_SESSION : NULL;
      // Update client cookies.
      $_COOKIE[$matches[1]] = $matches[2];

      // Set HTTP header cookies for others from the bearer token.
      if ($_SERVER['HTTP_COOKIE']) {
        $cookie_already_set =
            (FALSE !== strpos($_SERVER['HTTP_COOKIE'], $matches[1]));
      }

      if (!$cookie_already_set) {
        $_SERVER['HTTP_COOKIE'] .= "; " . $matches[1] . "=" . $matches[2];
      }

      // Update PHP session info.
      session_name($matches[1]);
      session_id($matches[2]);
      // Restart session system with new infos.
      session_start();
      // Restore previous session data.
      if (!empty($session_data)) {
        $_SESSION += $session_data;
      }
    }
  }
  elseif (isset($_SERVER['HTTP_AUTHORIZATION'])) {
    $got_authentication = preg_match(
                            "/\s*Bearer\s+([^\s=]+)=(\S+)/i",
                            $_SERVER['HTTP_AUTHORIZATION'],
                            $matches
                          );
    if ($got_authentication) {
      drupal_set_message(t('BrAPI: Authentication is only supported through HTTPS (secure http)!'), 'warning');
    }
  }
}

/**
 * Implements hook_permissions().
 *
 * 3 Permissions exist for this implementation of the Breeding API:
 *   - Use Breeding API: access to any Breeding API calls for read access;
 *   - Update through Breeding API: allow breeding data alteration;
 *   - Administer Breeding API: administrative access to manage CV settings and
 *     examples.
 *
 * @ingroup brapi
 */
function brapi_permission() {

  return array(
    BRAPI_USE_PERMISSION => array(
      'title' => t('Use Breeding API'),
      'description' => t('Allow users to access to the Breeding API.'),
    ),
    BRAPI_UPDATE_PERMISSION => array(
      'title' => t('Update through Breeding API'),
      'description' => t('Allow users to update server data (insert/update/delete) through the Breeding API. Only give this access to trusted users!'),
    ),
    BRAPI_ADMIN_PERMISSION => array(
      'title' => t('Administer Breeding API'),
      'description' => t('Allow users to administer Breeding API.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Specifies menu items and URLs used by the Breeding API module.
 *
 * @ingroup brapi
 */
function brapi_menu() {
  $items = array();

  // Overview page.
  $items['admin/tripal/extension/brapi'] = array(
    'title' => 'Breeding API',
    'description' => 'Breeding API Tripal extension module.',
    'page callback' => 'theme',
    'page arguments' => array('brapi_overview', array()),
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_ADMIN_PERMISSION),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/tripal/extension/brapi/overview'] = array(
    'title' => 'BrAPI Overview',
    'description' => 'Breeding API Tripal extension module.',
    'page callback' => 'theme',
    'page arguments' => array('brapi_overview', array()),
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_ADMIN_PERMISSION),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  // Configuration page.
  $items['admin/tripal/extension/brapi/configuration'] = array(
    'title' => 'Settings',
    'description' => 'Configure the Breeding API module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('brapi_admin_form', array()),
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_ADMIN_PERMISSION),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/tripal/extension/brapi/configuration/reset_mcpd'] = array(
    'title' => 'Settings',
    'description' => 'Confirm reload MCPD CV',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('brapi_reset_mcpd_form_confirm', array()),
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_ADMIN_PERMISSION),
  );

  // Help page based using theme/templates/brapi_help.tpl.php file.
  $items['admin/tripal/extension/brapi/help'] = array(
    'title' => 'Help',
    'description' => 'Basic Description of Breeding API Module Functionality',
    'page callback' => 'theme',
    'page arguments' => array('brapi_help', array()),
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_ADMIN_PERMISSION),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  // Public overview.
  $items['brapi/overview'] = array(
    'title' => 'Breeding API Overview',
    'description' => 'Breeding API overview.',
    'page callback' => 'theme',
    'page arguments' => array('brapi_public_overview', array()),
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_USE_PERMISSION),
    'type' => MENU_NORMAL_ITEM,
  );

  // Query interface.
  $items['brapi/query'] = array(
    'title' => 'Breeding API Query Interface',
    'description' => 'User interface that can be used to query a Breeding API service.',
    'page callback' => 'theme',
    'page arguments' => array('brapi_query', array()),
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_USE_PERMISSION),
    'type' => MENU_NORMAL_ITEM,
  );

  // Comparator interface.
  $items['brapi/comparator'] = array(
    'title' => 'Breeding API Comparator Interface',
    'description' => 'User interface that can be used to compare entities from 2 Breeding API services.',
    'page callback' => 'theme',
    'page arguments' => array('brapi_comparator', array()),
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_USE_PERMISSION),
    'type' => MENU_NORMAL_ITEM,
  );

  // Autocomplete script.
  $items['brapi/cvs/autocomplete'] = array(
    'title' => 'Autocomplete for BrAPI CVs',
    'page callback' => 'brapi_cvs_autocomplete',
    // Only used by administrative interfaces (prevents access to private data).
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_ADMIN_PERMISSION),
    'type' => MENU_CALLBACK,
  );
  $items['brapi/terms/autocomplete'] = array(
    'title' => 'Autocomplete for BrAPI terms',
    'page callback' => 'brapi_terms_autocomplete',
    // Only used by administrative interfaces (prevents access to private data).
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_ADMIN_PERMISSION),
    'type' => MENU_CALLBACK,
  );
  $items['brapi/filter/autocomplete/%/%'] = array(
    'title' => 'Autocomplete for BrAPI filters',
    'page callback' => 'brapi_filter_autocomplete',
    'page arguments' => array(3, 4),
    // User accessing BrAPI data can see returned values.
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_USE_PERMISSION),
    'type' => MENU_CALLBACK,
  );

  // Add-more button that creates additional form elements.
  // See ajax_example_graceful_degradation.inc.
  $items['brapi/settings/add_category'] = array(
    'title' => 'Add more germplasm attribute category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('brapi_add_category'),
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_ADMIN_PERMISSION),
    'file' => 'includes/brapi.admin.inc',
    'type' => MENU_CALLBACK,
  );
  // The above example as it appears to users with no JavaScript.
  $items['brapi/settings/add_category_no_js'] = array(
    'title' => 'Add more germplasm attribute category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('brapi_add_category', TRUE),
    'access callback' => 'user_access',
    'access arguments' => array(BRAPI_ADMIN_PERMISSION),
    'type' => MENU_CALLBACK,
    'file' => 'includes/brapi.admin.inc',
  );

  $menu_call_mapping = brapi_get_menu_call_mapping();
  // Generate Drupal URL menu for supported BrAPI calls.
  foreach (brapi_get_calls() as $call_name => $call_data) {
    $call_url = $menu_call_mapping['call_to_menu'][$call_name];
    // Check which permission to use. Note that the lowest permission should be
    // used at the Drupal level here because we will check later for higher
    // permissions anyway. That's why we start checking if GET is set and finish
    // by DELETE.
    $access_arguments = array(BRAPI_USE_PERMISSION);
    if (isset($call_data['methods']['GET'])) {
      $access_arguments = array($call_data['methods']['GET']);
    }
    elseif (isset($call_data['methods']['POST'])) {
      $access_arguments = array($call_data['methods']['POST']);
    }
    elseif (isset($call_data['methods']['PUT'])) {
      $access_arguments = array($call_data['methods']['PUT']);
    }
    elseif (isset($call_data['methods']['DELETE'])) {
      $access_arguments = array($call_data['methods']['DELETE']);
    }
    // Add call.
    $items[$call_url] = array(
      'title' => $call_data['title'],
      'description' => $call_data['description'],
      'page callback' => 'brapi_call_wrapper',
      // Add default arguments for brapi_call_wrapper(). Other arguments will be
      // added below after.
      'page arguments' => array(
        $call_name,
      ),
      'access callback' => 'user_access',
      'access arguments' => $access_arguments,
      'type' => MENU_CALLBACK,
    );
    // Manage optional arguments.
    if (array_key_exists('arguments', $call_data)) {
      foreach ($call_data['arguments'] as $argument => $argdata) {
        $items[$call_url]['page arguments'][] = $argument;
      }
    }
  }

  return $items;
}

/**
 * Implements hook_page_alter().
 *
 * @ingroup brapi
 */
function brapi_page_alter(&$page) {
  $brapi_prefix_length = strlen(BRAPI_SERVICE_PREFIX_V1);

  // Check for BrAPI errors and capture them to output them in JSON.
  $path = request_path();
  if (0 == strncmp($path, BRAPI_SERVICE_PREFIX_V1, $brapi_prefix_length)) {
    $status = drupal_get_http_header('Status');
    // Only catch 4xx and 5xx HTTP status.
    if (preg_match('/^([45]\d\d)\s*(.*)/', $status, $matches)) {
      $page = '';
      brapi_json_output(
        brapi_raise_error_json($matches[1], $matches[2])
      );
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @ingroup brapi
 */
function brapi_theme($existing, $type, $theme, $path) {
  $items = array(
    // The overview template.
    'brapi_overview' => array(
      'template' => 'brapi_overview',
      'variables' => array(NULL),
      'path' => "$path/theme/templates",
    ),
    // The public overview template.
    'brapi_public_overview' => array(
      'template' => 'brapi_public_overview',
      'variables' => array(NULL),
      'path' => "$path/theme/templates",
    ),
    // The help template.
    'brapi_help' => array(
      'template' => 'brapi_help',
      'variables' => array(NULL),
      'path' => "$path/theme/templates",
    ),
    // The Breeding API query page template.
    'brapi_query' => array(
      'render element' => 'form',
      'template' => 'brapi_query',
      'path' => "$path/theme/templates",
    ),
    // The Breeding API comparator template.
    'brapi_comparator' => array(
      'template' => 'brapi_comparator',
      'variables' => array(NULL),
      'path' => "$path/theme/templates",
    ),
  );

  return $items;
}

/**
 * Implements hook_help().
 *
 * @ingroup brapi
 */
function brapi_help($path, $arg) {
  if ($path == 'admin/help#brapi') {
    return theme('brapi_help', array());
  }
}

/**
 * Implements hook_chado_query_alter().
 *
 * @ingroup brapi
 */
function brapi_chado_query_alter(&$sql, &$args) {
  // Fix Tripal paging issue.
  $pager = brapi_force_pager();
  if ($pager && $pager['limit'] && $pager['element']) {
    $sql = preg_replace(
      '/OFFSET \d+/',
      'OFFSET ' . ($pager['limit'] * $pager['element']),
      $sql
    );
  }
  // Get all fields to wildcard search.
  $non_exact_fields = brapi_non_exact_search();
  if ($non_exact_fields) {
    // Get search type.
    $filters = brapi_get_url_call_args();
    $match_method =
      isset($filters['matchMethod']) ?
      strtolower($filters['matchMethod'])
      : 'wildcard';
  }
  foreach ($non_exact_fields as $field => $field_settings) {
    // Table-matching regexp to use.
    $table_regex =
      '/^\s*SELECT\s.+\sFROM.*\schado\.'
      . $field_settings['table']
      . '\s.*WHERE\s/i';
    // Check if the table appears in the query.
    if (preg_match($table_regex, $sql)) {
      // Table matches.
      if ($field_settings['match'] == 'case_insensitive') {
        // Just case insensitive.
        $sql = preg_replace(
          '/(\W)' . $field_settings['column'] . '(\s*=\s*)(\S+)/i',
          '${1}upper(' . $field_settings['column'] . ')${2}upper(${3})',
          $sql);
        // For multiple values, also operate on values.
        if (preg_match_all(
              '/\W' . $field_settings['column'] . '\s+IN\s*\(([^)]+)\)/i',
              $sql,
              $matches,
              PREG_PATTERN_ORDER)) {
          foreach ($matches[1] as $match_list) {
            $match_list = array_map('trim', explode(',', $match_list));
            foreach ($match_list as $match) {
              $args[$match] = strtoupper($args[$match]);
            }
          }
        }
        if (preg_match_all(
              '/\W' . $field_settings['column'] . '\s+IN\s+([^(]\S+)/i',
              $sql,
              $matches,
              PREG_PATTERN_ORDER)) {
          foreach ($matches[1] as $match) {
            $args[$match] = strtoupper($args[$match]);
          }
        }
        $sql = preg_replace(
          '/(\W)' . $field_settings['column'] . '(\s+IN\s+)/i',
          '${1}upper(' . $field_settings['column'] . ')${2}',
          $sql);
      }
      else {
        // Wildcards.
        // Work on single values.
        $sql = preg_replace(
          '/(\W)' . $field_settings['column'] . '(\s*)=/',
          '${1}' . $field_settings['column'] . '${2} ILIKE ',
          $sql);
        // Update jokers.
        if (preg_match_all(
              '/\W' . $field_settings['column'] . '\s+ILIKE\s+(\S+)/i',
              $sql,
              $matches,
              PREG_PATTERN_ORDER)) {
          foreach ($matches[1] as $match) {
            $args[$match] = brapi_transcribe_search_string_to_postgres($args[$match]);
          }
        }
        // Work on multiple values.
        $sql = preg_replace(
          '/(\W)' . $field_settings['column'] . '(\s+)IN(\W)/i',
          '${1}' . $field_settings['column'] . '${2}SIMILAR TO${3}',
          $sql);
        // Update values.
        if (preg_match_all(
              '/\W' . $field_settings['column'] . '\s+SIMILAR TO\s*\(([^\)]+)\)/i',
              $sql,
              $matches,
              PREG_PATTERN_ORDER)) {
          $variable_to_remove = array();
          foreach ($matches[1] as $match_list) {
            $match_list = array_map('trim', explode(',', $match_list));
            $new_variable = ':';
            $new_values = array();
            foreach ($match_list as $match) {
              $new_variable .= substr($match, 1);
              $variable_to_remove[] = $match;
              $new_values[] = brapi_transcribe_search_string_to_postgres(
                strtoupper($args[$match]),
                TRUE
              );
            }
            $args[$new_variable] = implode('|', $new_values);
            // Replaces multiple place holders by the new one.
            $sql = preg_replace(
              '/(\W)' . $field_settings['column'] . '(\s+)SIMILAR TO(\s*)\(([^\)]+)\)/i',
              '${1}upper(' . $field_settings['column'] . ')${2}SIMILAR TO ${3}' . $new_variable,
              $sql
            );
          }
          // Remove unused variables to avoid SQL query cancellation.
          foreach ($variable_to_remove as $variable) {
            if (FALSE === strpos($variable, $sql)) {
              unset($args[$variable]);
            }
          }
        }
      }
    }
  }
}
